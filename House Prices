import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
import numpy as np
from pandas import DataFrame

train_data_path = '../input/train.csv'
train = pd.read_csv(train_data_path)
test_data_path = '../input/test.csv'
test = pd.read_csv(test_data_path)

import matplotlib.pyplot as plt
plt.style.use(style='ggplot')
plt.rcParams['figure.figsize'] = (10,6)

train.SalePrice.describe()

print("Skew is:", train.SalePrice.skew())
plt.hist(train.SalePrice, color='blue')
plt.show()

target = np.log(train.SalePrice)
print("Skew is:",target.skew())
plt.hist(target,color='blue')
plt.show()

numeric_features = train.select_dtypes(include=[np.number])
numeric_features.dtypes

corr = numeric_features.corr()

print(corr['SalePrice'].sort_values(ascending=False)[:5], '\n')
print(corr['SalePrice'].sort_values(ascending=False)[-5:],)


train.OverallQual.unique()

quality_pivot = train.pivot_table(index='OverallQual',
                                 values='SalePrice',aggfunc=np.median)

quality_pivot


quality_pivot.plot(kind='bar',color='blue')
plt.xlabel('OverallQuality')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)

plt.show()

plt.scatter(x=train['GrLivArea'], y=target)
plt.ylabel('SalePrice')
plt.xlabel('Above grade (ground) living area square feet')
plt.show()

plt.scatter(x=train['GarageArea'], y=target)
plt.ylabel('SalePrice')
plt.xlabel('Garage Area')
plt.show()

train = train[train['GarageArea']<1200]
train = train[train['GarageArea']>0]

plt.scatter(x=train['GarageArea'], y=np.log(train.SalePrice))
plt.xlim(-200,1600)
plt.ylabel('SalePrice')
plt.xlabel('Garage Area')
plt.show()

nulls = pd.DataFrame(train.isnull().sum().sort_values(ascending=False)[:25])
nulls.columns = ['Null Count']
nulls.index.name = 'Feature'
nulls

print("PoolQC's Unique values are:",train.PoolQC.unique())
print("MiscFeature's Unique values are:",train.MiscFeature.unique())
print("Alley's Unique values are:",train.Alley.unique())
print("Fence's Unique values are:",train.Fence.unique())
print("FireplaceQu's Unique values are:",train.FireplaceQu.unique())
print("BsmtFinType2's Unique values are:",train.BsmtFinType2.unique())
print("BsmtExposure's Unique values are:",train.BsmtExposure.unique())
print("BsmtQual's Unique values are:",train.BsmtQual.unique())
print("BsmtCond's Unique values are:",train.BsmtCond.unique())
print("BsmtFinType1's Unique values are:",train.BsmtFinType1.unique())
print("MasVnrType's Unique values are:",train.MasVnrType.unique())
print("Electrical's Unique values are:",train.Electrical.unique())

print("MasVnrArea's Unique values are:",train.MasVnrArea.unique())

categoricals = train.select_dtypes(exclude=[np.number])
categoricals.describe()
print("original: \n")
print(train.Street.value_counts(), "\n")



train['enc_street'] = pd.get_dummies(train.Street, drop_first=True)
test['enc_street'] = pd.get_dummies(train.Street, drop_first=True)

print('Encoded: \n')
print(train.enc_street.value_counts())

condition_pivot = train.pivot_table(index='Street',
                                   values='SalePrice',aggfunc=np.median)
condition_pivot.plot(kind='bar', color='blue')
plt.xlabel('Street')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()

condition_pivot = train.pivot_table(index='SaleCondition',
                                   values='SalePrice',aggfunc=np.median)
condition_pivot.plot(kind='bar', color='blue')
plt.xlabel('Sale Condition')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()

def encode(x):
    return 1 if x == 'Partial' else 0
train['enc_condition'] = train.SaleCondition.apply(encode)
test['enc_condition'] = train.SaleCondition.apply(encode)

condition_pivot = train.pivot_table(index='enc_condition',
                                   values='SalePrice',aggfunc=np.median)
condition_pivot.plot(kind='bar', color='blue')
plt.xlabel('encoded Sale Condition')
plt.ylabel('Median Sale Price')
plt.xticks(rotation=0)
plt.show()

data = train.select_dtypes(include=[np.number]).interpolate().dropna()

sum(data.isnull().sum() != 0)

y = np.log(train.SalePrice)
X = data.drop(['SalePrice','Id'], axis=1)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=42, test_size=.33)



from sklearn import linear_model
lr = linear_model.LinearRegression()

model = lr.fit(X_train,y_train)

print("R^2 is: \n",model.score(X_test, y_test))

predictions = model.predict(X_test)

from sklearn.metrics import mean_squared_error
print('RMSE is: \n', mean_squared_error(y_test,predictions))


actual_values = y_test
plt.scatter(predictions, actual_values, alpha=.75,
           color='b')
plt.xlabel('Predicted Price')
plt.ylabel('Actual Price')
plt.title('Linear Regression model')
plt.show()

for i in range(-2, 3):
    alpha = 10 ** i
    rm = linear_model.Ridge(alpha=alpha)
    ridge_model = rm.fit(X_train, y_train)
    preds_ridge = ridge_model.predict(X_test)

    plt.scatter(preds_ridge, actual_values, alpha=.75, color='b')
    plt.xlabel('Predicted Price')
    plt.ylabel('Actual Price')
    plt.title('Ridge Regularization with alpha ={}'.format(alpha))
    overlay = 'R^2 is : {}\n RMSE is: {}'.format(
        ridge_model.score(X_test, y_test),
        mean_squared_error(y_test, preds_ridge))
    # plt.annotate(s=overlay,xy=(12.1,10.6),size='x-large')
    plt.show()

submission = pd.DataFrame()
submission['Id'] = test.Id

feats = test.select_dtypes(include=[np.number]).drop(['Id'], axis=1).interpolate()

predictions = model.predict(feats)

final_predictions = np.exp(predictions)

print("original", predictions[:], "\n")
print("Final", final_predictions)
submission['SalePrice'] = final_predictions
submission.head()
submission.to_csv('submission1.csv', index=False)